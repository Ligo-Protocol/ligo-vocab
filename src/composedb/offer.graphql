type QuantitativeValue {
  # The upper value of some characteristic or property.
  maxValue: Float
  # The lower value of some characteristic or property.
  minValue: Float
  # The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
  unitCode: String @string(maxLength: 100)
  # A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for {@link unitCode unitCode}.
  unitText: String @string(maxLength: 100)
  # The value of the quantitative value or property value node.
  value: Float
}

type GeoShape {
  # A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.
  box: String @string(maxLength: 100)
  # A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.
  circle: String @string(maxLength: 100)
  # A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.
  polygon: String @string(maxLength: 100)
  # The postal code. For example, 94043.
  postalCode: String @string(maxLength: 100)
}

type UnitPriceSpecification {
  # The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.
  price: Float
  # The currency of the price, or a price component when attached to PriceSpecification and its subtypes.
  priceCurrency: String @string(maxLength: 100)
  # The date when the item becomes valid
  validFrom: Date
  # The date after when the item is not valid.
  validThrough: Date
  # The interval and unit of measurement of ordering quantities for which the offer or price specification is valid.
  eligibleQuantity: QuantitativeValue
  # The reference quantity for which a certain price applies.
  referenceQuantity: QuantitativeValue
}

enum LigoVehicleOracle {
  SmartcarVehicleOracle
}

type LigoSafeEscrow {
  # The oracle used as the source of truth for vehicle data.
  vehicleOracle: LigoVehicleOracle
  # The arbitrator used to resolve subjective disputes.
  erc792Arbitrator: String @string(maxLength: 100)
}

type Car
  @loadModel(
    id: "kjzl6hvfrbw6c8r09rr589a19byisy55r64jkv41yg8kzf4kct64e6euuqxmjn5"
  ) {
  id: ID
}

type Offer
  @createModel(
    accountRelation: LIST
    description: "An Offer represents an offer from a vehicle owner to rent out a vehicle. https://schema.org/Offer"
  ) {
  # Description of the offer.
  description: String @string(maxLength: 100)
  # Image(s) of specific vehicle being offered.
  image: String @string(maxLength: 100)
  # The vehicle being offered.
  itemOfferedID: StreamID @documentReference(model: "Car")
  itemOffered: Car @relationDocument(property: "itemOfferedID")
  # The entity offering the rental.
  seller: DID
  # The approximate area where the vehicle is available to pickup. Can be used to obfuscate the precise location.
  areaServed: GeoShape
  # Available prices of an offer.
  priceSpecification: UnitPriceSpecification
  # The payment method(s) accepted by seller for this offer.
  acceptedPaymentMethod: LigoSafeEscrow
  # The amount of time that is required between accepting the offer and the actual usage of the resource or service.
  advanceBookingRequirement: QuantitativeValue
  # The interval and unit of measurement of ordering quantities for which the offer or price specification is valid.
  eligibleQuantity: QuantitativeValue
}
